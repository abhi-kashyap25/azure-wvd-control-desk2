import { AccountInfo, Logger, PerformanceCallbackFunction, IPerformanceClient, AccountFilter } from "@azure/msal-common/browser";
import { RedirectRequest } from "../../src/request/RedirectRequest.js";
import { PopupRequest } from "../../src/request/PopupRequest.js";
import { SilentRequest } from "../../src/request/SilentRequest.js";
import { SsoSilentRequest } from "../../src/request/SsoSilentRequest.js";
import { EndSessionRequest } from "../../src/request/EndSessionRequest.js";
import { ApiId, WrapperSKU } from "../../src/utils/BrowserConstants.js";
import { INavigationClient } from "../../src/navigation/INavigationClient.js";
import { EndSessionPopupRequest } from "../../src/request/EndSessionPopupRequest.js";
import { ITokenCache } from "../../src/cache/ITokenCache.js";
import { AuthorizationCodeRequest } from "../../src/request/AuthorizationCodeRequest.js";
import { BrowserConfiguration } from "../../src/config/Configuration.js";
import { AuthenticationResult } from "../../src/response/AuthenticationResult.js";
import { EventCallbackFunction } from "../../src/event/EventMessage.js";
import { ClearCacheRequest } from "../../src/request/ClearCacheRequest.js";
import { InitializeApplicationRequest } from "../../src/request/InitializeApplicationRequest.js";
import { EventType } from "../../src/event/EventType.js";
export interface IController {
    initialize(request?: InitializeApplicationRequest): Promise<void>;
    acquireTokenPopup(request: PopupRequest): Promise<AuthenticationResult>;
    acquireTokenRedirect(request: RedirectRequest): Promise<void>;
    acquireTokenSilent(silentRequest: SilentRequest): Promise<AuthenticationResult>;
    acquireTokenByCode(request: AuthorizationCodeRequest): Promise<AuthenticationResult>;
    acquireTokenNative(request: PopupRequest | SilentRequest | SsoSilentRequest, apiId: ApiId, accountId?: string): Promise<AuthenticationResult>;
    addEventCallback(callback: EventCallbackFunction, eventTypes?: Array<EventType>): string | null;
    removeEventCallback(callbackId: string): void;
    addPerformanceCallback(callback: PerformanceCallbackFunction): string;
    removePerformanceCallback(callbackId: string): boolean;
    enableAccountStorageEvents(): void;
    disableAccountStorageEvents(): void;
    getAccount(accountFilter: AccountFilter): AccountInfo | null;
    getAccountByHomeId(homeAccountId: string): AccountInfo | null;
    getAccountByLocalId(localId: string): AccountInfo | null;
    getAccountByUsername(userName: string): AccountInfo | null;
    getAllAccounts(accountFilter?: AccountFilter): AccountInfo[];
    handleRedirectPromise(hash?: string): Promise<AuthenticationResult | null>;
    loginPopup(request?: PopupRequest): Promise<AuthenticationResult>;
    loginRedirect(request?: RedirectRequest): Promise<void>;
    logout(logoutRequest?: EndSessionRequest): Promise<void>;
    logoutRedirect(logoutRequest?: EndSessionRequest): Promise<void>;
    logoutPopup(logoutRequest?: EndSessionPopupRequest): Promise<void>;
    clearCache(logoutRequest?: ClearCacheRequest): Promise<void>;
    ssoSilent(request: SsoSilentRequest): Promise<AuthenticationResult>;
    getTokenCache(): ITokenCache;
    getLogger(): Logger;
    setLogger(logger: Logger): void;
    setActiveAccount(account: AccountInfo | null): void;
    getActiveAccount(): AccountInfo | null;
    initializeWrapperLibrary(sku: WrapperSKU, version: string): void;
    setNavigationClient(navigationClient: INavigationClient): void;
    /** @internal */
    getConfiguration(): BrowserConfiguration;
    hydrateCache(result: AuthenticationResult, request: SilentRequest | SsoSilentRequest | RedirectRequest | PopupRequest): Promise<void>;
    /** @internal */
    isBrowserEnv(): boolean;
    /** @internal */
    getPerformanceClient(): IPerformanceClient;
}
//# sourceMappingURL=IController.d.ts.map